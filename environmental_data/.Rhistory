ylim(-27.5, -26.7) + xlim(31.8, 33)
ggplot() +
geom_raster(data = as.data.frame(lc_cropped, xy = TRUE),
aes(x = x, y = y, fill = SA_NLC_2018_GEO)) +
geom_sf(data = municipality.sf, fill = NA) +
geom_sf(data = df.sf) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Land Use Category") +
ylim(-27.5, -26.7) + xlim(31.8, 33)
lc_cropped
plot(lc_cropped)
ndvi <- read.csv("ndvidata.csv")
ndvi
et <- list.files(path = paste0(data.dir, "et"), pattern = "ET_500m.tif")
list.et <- paste0(data.dir, "et/", et)
t <- raster(list.et[[1]])
t
ls_cropped
landcover
lc_cropped <- crop(landcover, b)
lc_cropped
head(lc_cropped$SA_NLC_2018_GEO)
summary(lc_cropped$SA_NLC_2018_GEO)
head(attributes(lc_cropped))
ggplot() +
geom_raster(data = as.data.frame(lc_cropped, xy = TRUE),
aes(x = x, y = y, fill = SALCC_1)) +
geom_sf(data = municipality.sf, fill = NA) +
geom_sf(data = df.sf) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Land Use Category") +
ylim(-27.5, -26.7) + xlim(31.8, 33)
str(lc_cropped@data)
str(lc_cropped$data)
str(lc_cropped@data$SA_NLC_2018_GEO)
str(lc_cropped@data@attributes)
head(lc_cropped@data@attributes)
str(lc_cropped@data@attributes)
ncell(lc_cropped)
nlayers(lc_cropped)
?factorValues
test <- deratify(lc_cropped, 'SALCC_1')
plot(test)
test
test@data$attributes
str(test@data@attributes)
str(test@data@attributes$SALCC_1)
lc.salcc_1 <- factorValues(lc_cropped, 1:114370168, layer = 1, att=17, append.names=FALSE)
lc.salcc_1 <- test
ggplot() +
geom_raster(data = as.data.frame(lc.salcc_1, xy = TRUE),
aes(x = x, y = y, fill = as.factor(SALCC_1))) +
geom_sf(data = municipality.sf, fill = NA) +
geom_sf(data = df.sf) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Land Use Category") +
ylim(-27.5, -26.7) + xlim(31.8, 33)
ggplot() +
geom_raster(data = as.data.frame(lc.salcc_1, xy = TRUE),
aes(x = x, y = y, fill = SALCC_1)) +
geom_sf(data = municipality.sf, fill = NA) +
geom_sf(data = df.sf) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Land Use Category") +
ylim(-27.5, -26.7) + xlim(31.8, 33)
lc.salcc_1
lc.salcc_1 <- deratify(lc_cropped, 'SALCC_1')
?autocov_dist
?plot
bio <- getData('worldclim', var = 'bio', res = 0.5, lon = 32,
lat = -27, path = env.dir)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/mosquito/environmental_data")
x <- c("rgdal", "rgeos", "maptools", "sp", "sf", "raster",
"ggplot2", "RColorBrewer", "reshape2", "dismo")
lapply(x, library, character.only = TRUE)
loc.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/country/"
data.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/"
sa <- readOGR(dsn = loc.dir, layer = "zaf_admbnda_adm0_2016SADB_OCHA")
province <- readOGR(dsn = loc.dir, layer = "zaf_admbnda_adm1_2016SADB_OCHA")
province.red <- gSimplify(province, tol = 0.001, topologyPreserve = TRUE)
province.red <- SpatialPolygonsDataFrame(province.red, data = province@data)
province.sf <- as(province.red, "sf")
district <- readOGR(dsn = loc.dir, layer = "zaf_admbnda_adm2_2016SADB_OCHA")
district.red <- gSimplify(district, tol = 0.001, topologyPreserve = TRUE)
district.red <- SpatialPolygonsDataFrame(district.red, data = district@data)
district.sf <- as(district.red, "sf")
municipality<- readOGR(dsn = loc.dir, layer = "zaf_admbnda_adm3_2016SADB_OCHA")
municipality.red<- gSimplify(municipality, tol = 0.001, topologyPreserve = TRUE)
municipality.red <- SpatialPolygonsDataFrame(municipality.red,
data = municipality@data)
municipality.sf <- as(municipality.red, "sf")
# Read in study sites
peter <- read.csv("diptanks.csv")
df <- SpatialPointsDataFrame(coords = cbind(peter$long, peter$lat),
proj4string = sa@proj4string, data = peter)
df.sp <- SpatialPoints(coords = cbind(peter$long, peter$lat),
proj4string = sa@proj4string)
df.sf <- st_as_sf(peter, coords = c("long", "lat"), crs = st_crs(sa@proj4string))
# An easier way for to get administrative boundaries in the future
#moz <- getData('GADM', country = 'MZ', download = TRUE, path =loc.dir, level=1)
sz <- getData('GADM', country = 'SZ', download = TRUE, path = loc.dir, level=0)
moz <- readRDS(paste0(loc.dir, "gadm36_MOZ_1_sp.rds"))
moz.red<- gSimplify(moz, tol = 0.001, topologyPreserve = TRUE)
moz.red <- SpatialPolygonsDataFrame(moz.red, data = moz@data)
moz.sf <- as(moz.red, "sf")
# Swaziland
sz <- readRDS(paste0(loc.dir, "gadm36_SWZ_0_sp.rds"))
sz.red<- gSimplify(sz, tol = 0.001, topologyPreserve = TRUE)
sz.red <- SpatialPolygonsDataFrame(sz.red, data = sz@data)
sz.sf <- as(sz.red, "sf")
bio <- getData('worldclim', var = 'bio', res = 0.5, lon = 32,
lat = -27, path = env.dir)
env.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/climate_elevation/"
bio <- getData('worldclim', var = 'bio', res = 0.5, lon = 32,
lat = -27, path = env.dir)
ggplot() +
geom_raster(data = as.data.frame(bio[[12]], xy = TRUE),
aes(x = x, y = y, fill = bio12_37)) +
scale_fill_distiller(palette = 18, na.value = "transparent", direction = 1) +
geom_sf(data = province.sf, fill = NA) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Average annual precipitation")
precip <- crop(bio[[12]], b)
mun.plot <- st_crop(municipality.sf, b)
ggplot() +
geom_raster(data = as.data.frame(precip, xy = TRUE),
aes(x = x, y = y, fill = bio12_37)) +
scale_fill_distiller(palette = 18, na.value = "transparent", direction = 1) +
geom_sf(data = mun.plot, fill = NA) +
geom_sf(data = df.sf) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Annual precipitation") +
ylim(-27.5, -26.7) + xlim(31.8, 33)
precip <- crop(bio[[12]], b)
mun.plot <- st_crop(municipality.sf, b)
ggplot() +
geom_raster(data = as.data.frame(precip, xy = TRUE),
aes(x = x, y = y, fill = bio12_37)) +
scale_fill_distiller(palette = 18, na.value = "transparent", direction = 1) +
geom_sf(data = mun.plot, fill = NA) +
geom_sf(data = df.sf) +
theme_minimal() + theme(legend.title = element_blank()) +
xlab("") + ylab("") + ggtitle(label = "Annual precipitation") +
ylim(-27.5, -26.7) + xlim(31.8, 33)
getwd()
# Clear the workspace.
rm(list = ls())
# Load in data manipulation libraries.
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
# Load in the raw serological cattle data.
setwd("/Users/u1774615/GitHub/mosquito/data") # FIX ME
source("Peters_data_conversion_functions.R")
sero <- read.csv("raw/ndumo_cattle.csv", header=TRUE)
# Convert the date column to a date type.
sero$DATE <- as.Date(sero$date, format="%d%b%Y")
# Round down the animal age to:
# (i) an integer,
# (ii) maximum of age 9.
df <- sero %>%
mutate(AGE = floor(age_y)) %>%
mutate(AGE = ifelse(AGE > 9, 9, AGE))
# Summarize data
t <- data.frame(table(df$animal_id))
print(paste("number of samples:", length(df[,1])))
print(paste("number of unique animal IDs:", length(t[,1])))
# Some strange animal names, but looks unique:
# df[df$animal_id == "no tag 1s",] # follow up sequence looks good
# df[df$animal_id == "no tag 2s",] # follow up sequence looks good
# df[df$animal_id == "no tag 1",]  # rvf- and no follow-up
# df[df$animal_id == "no tag 2",]  # rvf- and no follow-up
# df[df$animal_id == "wrong tag",] # rvf- and no follow-up
# df[df$animal_id == "pinktag",] # rvf- and no follow-up
# Age at first capture (gives only unique ids)
first <- df[df$DATE < as.Date("2016-09-09"), ]
# quantile(first$AGE) # median 4
# tapply(first$AGE, first$place, quantile) # largely consistent
ggplot(first, aes(AGE)) + geom_bar() + facet_wrap(~place)
print(paste("overall prevalence at first capture:",
length(first$rvf[first$rvf == 1])/length(first$rvf)))
#ggplot(first, aes(x= AGE)) + geom_bar() + facet_wrap(~rvf)
#tapply(first$AGE, first$rvf, quantile) # consistent
# Age-prev at first capture
ggplot(first, aes(x = AGE, fill = as.factor(rvf))) + geom_bar()
# Prev at first capture by village
ggplot(first, aes(x = as.factor(place), fill = as.factor(rvf))) + geom_bar()
ggplot(df, aes(DATE)) + geom_histogram() + facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(df, df$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_histogram() + facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(df)
View(df[df$place %in% c(5, 6, 7, 9),])
t <- df[df$place %in% c(5, 6, 7, 9),]
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_histogram() + #facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_histogram() + #facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_bar(stat="identity") + #facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_col(stat="identity") + #facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
unique(t$DATE)
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_histogram() + #facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
unique(t$DATE); length(unique(t$DATE))
t <- df[df$place %in% c(5, 6, 7, 9),]
unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
?scale_x_date
t <- df[df$place %in% c(5, 6, 7, 9),]
unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE)) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")), aes(DATE, colour = place)) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
head(t)
t <- df[df$place %in% c(5, 6, 7, 9),]
unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, colour = as.factor(place))) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(t[t$place ==5, ])
View(t[t$place == 6,])
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 7),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 7),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 39) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 50) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 100) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 7),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 200) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 6, 7),]
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 6, 7),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 200) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 6, 7),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 200) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 6, 7, 9),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 200) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 5, 6, 7),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 200) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#t <- df[df$place %in% c(5, 6, 7, 9),]
t <- df[df$place %in% c(1, 2, 3, 5, 6, 7, 9),]
# unique(t$DATE); length(unique(t$DATE))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(DATE, fill = as.factor(place))) +
geom_histogram(bins = 200) + #facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5, 6, 7, 9),]
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = DATE, y = animal_id, z = rvf)) +
geom_tile() + facet_wrap(~place) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = DATE, y = animal_id, z = rvf)) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_blank())
head(t$date)
head(t$DATE)
t$monthdate <- floor_date(t$DATE, 'month')
head(t, 10)
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, z = rvf)) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_blank())
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = rvf)) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_blank())
t <- df[df$place %in% c(5, 6, 7, 9),]
t$monthdate <- floor_date(t$DATE, 'month')
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_blank())
t <- df[df$place %in% c(5),]
t$monthdate <- floor_date(t$DATE, 'month')
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_blank())
?geom_tile
t <- df[df$place %in% c(5),]
t$monthdate <- floor_date(t$DATE, 'month')
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_raster() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_blank())
t <- df[df$place %in% c(5),]
t$monthdate <- floor_date(t$DATE, 'month')
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
t <- df[df$place %in% c(5),]
t$monthdate <- floor_date(t$DATE, 'month')
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 8)
t <- df[df$place %in% c(5),]
t$monthdate <- floor_date(t$DATE, 'month')
ggplot(subset(t, t$DATE > as.Date("2016-11-20")),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 8))
make_one_plot = function(place_number){
t <- df[df$place %in% c(place_number), ]
t$monthdate <- floor_date(t$DATE, 'month')
plotids <- t$animal_id[t$DATE > as.Date("2016-11-20")]
ggplot(subset(t, t$animal_id %in% plotids),
aes(x = monthdate, y = animal_id, fill = as.factor(rvf))) +
geom_tile() +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 8))
}
make_one_plot(5)
table(df$place)
t <- df[df$place %in% c(3), ]
head(t)
t$monthdate <- floor_date(t$DATE, 'month')
t
t <- df[df$place %in% c(3), ]
t
rm(list = ls())
setwd("~/GitHub/mosquito/environmental_data")
download = FALSE
loc.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/country/"
data.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/"
x <- c("rgdal", "rgeos", "maptools", "sp", "sf", "raster", "MODIS",
"gdalUtils", "ggplot2", "RColorBrewer")
lapply(x, library, character.only = TRUE)
?runGdal
???readhdf
??readhdf
?get_subdatasets
?gdal_translate
rm(list = ls())
setwd("~/GitHub/mosquito/environmental_data")
download = FALSE
loc.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/country/"
data.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/"
ndvi <- list.files(path = paste0(data.dir, "NDVI.EVI"), pattern = "NDVI.tif")
ndvi
list.ndvi <- paste0(data.dir, "NDVI.EVI/", ndvi)
list.ndvi[1:5]
test <- raster(list.ndvi[1])
?runGdal
head(sero)
setwd("/Users/u1774615/GitHub/mosquito/data") # FIX ME
source("Peters_data_conversion_functions.R")
sero <- read.csv("raw/ndumo_cattle.csv", header=TRUE)
sero$DATE <- as.Date(sero$date, format="%d%b%Y")
min(sero$DATE)
max(sero$DATE)
max(sero$DATE) - min(sero$DATE)
722/7
library(dismo)
library(rgdal)
library(rgeos)
library(raster)
library(sp)
library(sf)
library(ggplot2)
library(RColorBrewer)
rm(list = ls())
setwd("~/GitHub/mosquito/environmental_data")
env.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/climate_elevation/"
loc.dir <- "/Users/u1774615/GitHub/mosquito/environmental_data/country/"
?getData
#################################################################
#################################################################
# Read in study sites spatial information
#################################################################
#################################################################
district <- readOGR(dsn = loc.dir, layer = "zaf_admbnda_adm2_2016SADB_OCHA")
district.red <- gSimplify(district, tol = 0.001, topologyPreserve = TRUE)
district.red <- SpatialPolygonsDataFrame(district.red, data = district@data)
district.sf <- as(district.red, "sf")
municipality<- readOGR(dsn = loc.dir, layer = "zaf_admbnda_adm3_2016SADB_OCHA")
municipality.red<- gSimplify(municipality, tol = 0.001, topologyPreserve = TRUE)
municipality.red <- SpatialPolygonsDataFrame(municipality.red,
data = municipality@data)
municipality.sf <- as(municipality.red, "sf")
# Read in study sites
peter <- read.csv("diptanks.csv")
df <- SpatialPointsDataFrame(coords = cbind(peter$long, peter$lat),
proj4string = district@proj4string, data = peter)
df.sp <- SpatialPoints(coords = cbind(peter$long, peter$lat),
proj4string = district@proj4string)
df.sf <- st_as_sf(peter, coords = c("long", "lat"),
crs = st_crs(district@proj4string))
#################################################################
#################################################################
# Download / Read in WorldClim Data
#################################################################
#################################################################
# Worldclim elevation  (alt for altitude), at 90m resolution
elevation <- getData("alt", country = "ZAF", level = 0, path = env.dir)
plot(elevation[[1]])
# Worldclim (historical monthly: https://www.worldclim.org/data/monthlywth.html)
# tmin, tmax, prec,  - all at 0.5 resolution (minutes of degrees) ~1km
precip <- getData('worldclim', var = 'tmin',
res = 0.5, lon = 32, lat = -27)
# Bioclimactic variables are average annual summary information
# manual download from (https://www.worldclim.org/data/bioclim.html)
# BIO12 = Annual Precipitation; BIO13 = Precipitation of Wettest Month;
# BIO14 = Precipitation of Driest Month; BIO15 = Precipitation Seasonality (CV)
bio <- getData('worldclim', var = 'bio', res = 0.5, lon = 32,
lat = -27, path = env.dir)
str(bio)
summary(bio)
